<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/melina/Documents/js/scrape/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2018-02-21T06:20+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Nonstandard Interpretations of Probabilistic Programs for Efficient Inference</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wingate</surname></persName>
							<email>wingated@mit.edu</email>
							<affiliation key="aff0">
								<orgName type="department">ECE, Purdue</orgName>
								<orgName type="institution">BCS / LIDS</orgName>
								<address>
									<region>MIT</region>
									<country>Stanford</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Noah</forename><forename type="middle">D</forename><surname>Goodman</surname></persName>
							<email>ngoodman@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">ECE, Purdue</orgName>
								<orgName type="institution">BCS / LIDS</orgName>
								<address>
									<region>MIT</region>
									<country>Stanford</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Stuhlmüller</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECE, Purdue</orgName>
								<orgName type="institution">BCS / LIDS</orgName>
								<address>
									<region>MIT</region>
									<country>Stanford</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuhlm¨</forename><surname>Stuhlmüller</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECE, Purdue</orgName>
								<orgName type="institution">BCS / LIDS</orgName>
								<address>
									<region>MIT</region>
									<country>Stanford</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">M</forename><surname>Siskind</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECE, Purdue</orgName>
								<orgName type="institution">BCS / LIDS</orgName>
								<address>
									<region>MIT</region>
									<country>Stanford</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Nonstandard Interpretations of Probabilistic Programs for Efficient Inference</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Probabilistic programming languages allow modelers to specify a stochastic process using syntax that resembles modern programming languages. Because the program is in machine-readable format, a variety of techniques from compiler design and program analysis can be used to examine the structure of the distribution represented by the probabilistic program. We show how nonstandard interpretations of probabilistic programs can be used to craft efficient inference algorithms: information about the structure of a distribution (such as gradients or dependencies) is generated as a monad-like side computation while executing the program. These interpretations can be easily coded using special-purpose objects and operator overloading. We implement two examples of nonstandard interpretations in two different languages, and use them as building blocks to construct inference algorithms: automatic differentiation, which enables gradient based methods, and provenance tracking, which enables efficient construction of global proposals.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
	</text>
</TEI>
